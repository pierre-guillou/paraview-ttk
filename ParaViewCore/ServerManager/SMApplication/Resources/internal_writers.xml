<ServerManagerConfiguration>
  <ProxyGroup name="internal_writers">
    <!--
      *****************************************************************
      These are proxies used by meta-writers defined in writers.xml
      *****************************************************************
    -->
    <!-- ================================================================= -->
    <Proxy name="DataWriterBase">
      <!-- Base for non-xml data writers -->
      <Documentation>This defines the interface for legacy vtk data files
      writer.</Documentation>
      <IntVectorProperty command="SetFileType"
                         default_values="2"
                         name="FileType"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="Ascii"
                 value="1" />
          <Entry text="Binary"
                 value="2" />
        </EnumerationDomain>
        <Documentation>The type for the data file (i.e. ascii or
        binary).</Documentation>
      </IntVectorProperty>
      <!-- End of DataWriterBase -->
    </Proxy>
    <!-- ================================================================= -->
    <Proxy class="not-used"
           name="ParallelWriterBase">
      <Documentation>This defines the interface for the parallel
      writers.</Documentation>
      <!-- Base for parallel writers -->
      <StringVectorProperty command="SetFileName"
                            name="FileName"
                            number_of_elements="1">
        <Documentation>The name of the file to be written.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetGhostLevel"
                         default_values="0"
                         name="GhostLevel"
                         number_of_elements="1">
        <IntRangeDomain min="0"
                        name="range" />
        <Documentation>The number of ghost levels to include in the output
        file(s). Note that some writers (such as ExodusIIWriter) may not
        support writing ghost levels.</Documentation>
      </IntVectorProperty>
      <SubProxy>
        <SourceProxy class="vtkCompleteArrays"
                     name="CompleteArrays"></SourceProxy>
      </SubProxy>
      <!-- End of ParallelWriterBase -->
    </Proxy>
    <!-- ================================================================= -->
    <Proxy name="FileSeriesWriter">
      <StringVectorProperty command="SetFileName"
                            name="FileName"
                            number_of_elements="1">
        <Documentation>The name of the file to be written.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetWriteAllTimeSteps"
                         default_values="0"
                         label="Write timesteps as file-series"
                         name="WriteTimeSteps"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>When WriteTimeSteps is OFF, the writer
        writes only the current timestep. Otherwise it is called once
        for each time step within the min and max range. If those are
        not set, the writer is called for all time steps available in
        its input.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetMinTimeStep"
                         default_values="0"
                         label="First time step"
                         name="MinTimeStep"
                         number_of_elements="1">
        <IntRangeDomain min="0"
                        name="range" />
        <Documentation>Sets the lower bound for timesteps to write.</Documentation>
        <Hints>
          <PropertyWidgetDecorator type="EnableWidgetDecorator">
	    <Property name="WriteTimeSteps" function="boolean" />
	  </PropertyWidgetDecorator>
	</Hints>
      </IntVectorProperty>
      <IntVectorProperty command="SetMaxTimeStep"
                         default_values="-1"
                         label="Last time step"
                         name="MaxTimeStep"
                         number_of_elements="1">
        <Documentation>Sets the upper bound for timesteps to write. If
        less than min, the last time step is used.</Documentation>
        <Hints>
          <PropertyWidgetDecorator type="EnableWidgetDecorator">
	    <Property name="WriteTimeSteps" function="boolean" />
	  </PropertyWidgetDecorator>
	</Hints>
      </IntVectorProperty>
      <IntVectorProperty command="SetTimeStepStride"
                         default_values="1"
                         label="Time step stride"
                         name="TimeStepStride"
                         number_of_elements="1">
        <IntRangeDomain min="1"
                        name="range" />
        <Documentation>Sets the stride to go through the time steps.</Documentation>
        <Hints>
          <PropertyWidgetDecorator type="EnableWidgetDecorator">
	    <Property name="WriteTimeSteps" function="boolean" />
	  </PropertyWidgetDecorator>
	</Hints>
      </IntVectorProperty>

      <StringVectorProperty command="SetFileNameSuffix"
			    default_values="_%d"
		            label = "File name suffix"
                            name="FileNameSuffix"
                            number_of_elements="1">
        <Documentation>
	  The suffix to append to the file name when writing files at different timesteps.
	  (File extensions such as .vtk should be excluded.)
          The % format specifiers are used. For example, _%d will write files as FileName_0,
	  FileName_1, FileName_2, etc., and _%.3d will write files as FileName_000,
          FileName_001, FileName_002 etc.
        </Documentation>
        <Hints>
          <PropertyWidgetDecorator type="EnableWidgetDecorator">
	    <Property name="WriteTimeSteps" function="boolean" />
	  </PropertyWidgetDecorator>
	</Hints>
      </StringVectorProperty>

      <PropertyGroup label="File Series">
        <Property name="WriteTimeSteps" />
	<Property name="FileNameSuffix"/>
        <Property name="MinTimeStep" />
        <Property name="MaxTimeStep" />
        <Property name="TimeStepStride" />
      </PropertyGroup>

      <!-- End of FileSeriesWriter -->
    </Proxy>
    <!-- ================================================================= -->
    <Proxy name="ParallelFileSeriesWriter">
      <StringVectorProperty command="SetFileName"
                            name="FileName"
                            number_of_elements="1">
        <Documentation>The name of the file to be written.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetWriteAllTimeSteps"
                         default_values="0"
                         label="Write all timesteps as file-series"
                         name="WriteTimeSteps"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>When WriteTimeSteps is turned ON, the writer is
        executed once for each timestep available from its input.</Documentation>
      </IntVectorProperty>
      <SubProxy>
        <!-- No harm if use vtkCompleteArrays even in serial mode so, we are
             letting it be -->
        <SourceProxy class="vtkCompleteArrays"
                     name="CompleteArrays"></SourceProxy>
      </SubProxy>
      <IntVectorProperty command="SetMinTimeStep"
                         default_values="0"
                         label="First time step"
                         name="MinTimeStep"
                         number_of_elements="1">
        <IntRangeDomain min="0"
                        name="range" />
        <Documentation>Sets the lower bound for timesteps to write.</Documentation>
        <Hints>
          <PropertyWidgetDecorator type="EnableWidgetDecorator">
	    <Property name="WriteTimeSteps" function="boolean" />
	  </PropertyWidgetDecorator>
	</Hints>
      </IntVectorProperty>
      <IntVectorProperty command="SetMaxTimeStep"
                         default_values="-1"
                         label="Last time step"
                         name="MaxTimeStep"
                         number_of_elements="1">
        <Documentation>Sets the upper bound for timesteps to write. If
        less than min, the last time step is used.</Documentation>
        <Hints>
          <PropertyWidgetDecorator type="EnableWidgetDecorator">
	    <Property name="WriteTimeSteps" function="boolean" />
	  </PropertyWidgetDecorator>
	</Hints>
      </IntVectorProperty>
      <IntVectorProperty command="SetTimeStepStride"
                         default_values="1"
                         label="Time step stride"
                         name="TimeStepStride"
                         number_of_elements="1">
        <IntRangeDomain min="1"
                        name="range" />
        <Documentation>Sets the stride to go through the time steps.</Documentation>
        <Hints>
          <PropertyWidgetDecorator type="EnableWidgetDecorator">
	    <Property name="WriteTimeSteps" function="boolean" />
	  </PropertyWidgetDecorator>
	</Hints>
      </IntVectorProperty>

      <StringVectorProperty command="SetFileNameSuffix"
			    default_values="_%d"
		            label = "File name suffix"
                            name="FileNameSuffix"
                            number_of_elements="1">
        <Documentation>
	  The suffix to append to the file name when writing files at different timesteps.
	  (File extensions such as .vtk should be excluded.)
          The % format specifiers are used. For example, _%d will write files as FileName_0,
	  FileName_1, FileName_2, etc., and _%.3d will write files as FileName_000,
          FileName_001, FileName_002 etc.
        </Documentation>
        <Hints>
          <PropertyWidgetDecorator type="EnableWidgetDecorator">
	    <Property name="WriteTimeSteps" function="boolean" />
	  </PropertyWidgetDecorator>
	</Hints>
      </StringVectorProperty>

      <PropertyGroup label="File Series">
        <Property name="WriteTimeSteps" />
        <Property name="FileNameSuffix" />
        <Property name="MinTimeStep" />
        <Property name="MaxTimeStep" />
        <Property name="TimeStepStride" />
      </PropertyGroup>

      <!-- End of ParallelFileSeriesWriter -->
    </Proxy>
    <!-- ================================================================= -->
    <Proxy base_proxygroup="internal_writers"
           base_proxyname="DataWriterBase"
           class="vtkSTLWriter"
           name="STLWriter">
      <Documentation short_help="Write stereo lithography files.">
      </Documentation>
      <!-- End of STLWriter -->
    </Proxy>
    <!-- ================================================================= -->
    <Proxy base_proxygroup="internal_writers"
           base_proxyname="DataWriterBase"
           class="vtkPVPLYWriter"
           name="PLYWriter">
      <Documentation short_help="Write polygonal data in Stanford University PLY format.">
      </Documentation>
      <InputProperty name="DummyInput" panel_visibility="never">
        <InputArrayDomain attribute_type="any" name="input_array" />
      </InputProperty>

      <IntVectorProperty name="EnableColoring"
                         command="SetEnableColoring"
                         number_of_elements="1"
                         default_values="0">
        <BooleanDomain name="bool" />
        <Documentation>
          Specify whether color information should be saved in the PLY file.
          If enabled, the data source's array to color with from the active view will be used.
        </Documentation>
        <Hints>
        <PropertyWidgetDecorator type="GenericDecorator"
                                   mode="enabled_state"
                                   property="LookupTable"
                                   inverse="1"
                                   value="null" />
        </Hints>
      </IntVectorProperty>
      <IntVectorProperty name="EnableAlpha"
                         command="SetEnableAlpha"
                         number_of_elements="1"
                         default_values="0">
        <BooleanDomain name="bool" />
        <Documentation>
          Specify whether alpha channel information should be saved in the PLY file.
          If enabled, the data source's transfer function from the active view will be used.
          This property is disabled if EnableColoring isn't enabled.
        </Documentation>
        <Hints>
          <PropertyWidgetDecorator type="GenericDecorator"
                                   mode="enabled_state"
                                   property="EnableColoring"
                                   value="1" />
        </Hints>
      </IntVectorProperty>
      <StringVectorProperty command="SetInputArrayToProcess"
                            element_types="0 0 0 0 2"
                            name="ColorArrayName"
                            no_custom_default="1"
                            number_of_elements="5">
        <Documentation>
          The array that will be used for saving color information when
          **Enable Coloring** is ON.
        </Documentation>
        <ArrayListDomain name="array_list">
          <RequiredProperties>
            <Property function="Input" name="DummyInput" />
          </RequiredProperties>
        </ArrayListDomain>
        <FieldDataDomain name="field_list">
          <RequiredProperties>
            <Property function="Input" name="DummyInput" />
          </RequiredProperties>
        </FieldDataDomain>
        <Hints>
          <PropertyWidgetDecorator type="GenericDecorator"
                                   mode="visibility"
                                   property="EnableColoring"
                                   value="-1" />
          <!-- I am keeping this widget always hidden since I don't want the
               user to be able to change the array in the Writer's dialog.
               User should change the data's coloring properties in the active view
               instead -->
        </Hints>
      </StringVectorProperty>
      <ProxyProperty command="SetLookupTable" name="LookupTable" >
        <Documentation>Set the lookup table to use for scalar
        mapping.</Documentation>
        <ProxyGroupDomain name="groups">
          <Group name="lookup_tables" />
        </ProxyGroupDomain>
      </ProxyProperty>
      <!-- End of PLYWriter -->
    </Proxy>
    <!-- ================================================================= -->
    <Proxy class="vtkOBJWriter"
           name="OBJWriter">
      <Documentation short_help="Write polygonal data in Wavefront OBJ format.">
      </Documentation>
      <StringVectorProperty command="SetFileName"
                            name="FileName"
                            number_of_elements="1">
        <Documentation>The name of the file to be written.</Documentation>
      </StringVectorProperty>
      <InputProperty name="DummyInput" panel_visibility="never">
        <InputArrayDomain attribute_type="any" name="input_array" />
      </InputProperty>
      <!-- End of OBJWriter -->
    </Proxy>
    <!-- ================================================================= -->
    <Proxy base_proxygroup="internal_writers"
           base_proxyname="DataWriterBase"
           class="vtkGenericDataObjectWriter"
           name="DataSetWriterCore">
      <Documentation>Internal proxy used for writing legacy vtk
      files.</Documentation>
    </Proxy>
    <!-- ================================================================= -->
    <Proxy class="vtkXMLDataObjectWriter"
           name="XMLDataObjectWriterCore">
      <Documentation>Internal writer for writing xml-based vtk
      files.</Documentation>
      <IntVectorProperty command="SetDataMode"
                         default_values="2"
                         name="DataMode"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="Ascii"
                 value="0" />
          <Entry text="Binary"
                 value="1" />
          <Entry text="Appended"
                 value="2" />
        </EnumerationDomain>
        <Documentation>The mode uses for writing the file's data i.e. ascii,
        binary, appended binary.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetHeaderType"
                         default_values="64"
                         name="HeaderType"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="UInt32" value="32" />
          <Entry text="UInt64" value="64" />
        </EnumerationDomain>
        <Documentation>Set the binary data header word type.  The default is
        UInt32. Set to UInt64 when storing arrays requiring 64-bit indexing.
        </Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetEncodeAppendedData"
                         default_values="0"
                         name="EncodeAppendedData"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>When EncodeAppendedData is turned ON, the writer uses
        base64 encoding when writing binary data (only if appended mode is
        selected).</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetCompressorType"
                         default_values="0"
                         name="CompressorType"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="None"
                 value="0"
                 info="fastest write" />
          <Entry text="LZ4"
                 value="2"
                 info="fastest compressed write" />
          <Entry text="ZLib"
                 value="1"
                 info="balanced performance" />
          <Entry text="LZMA"
                 value="3"
                 info="smallest filesize" />
        </EnumerationDomain>
        <Documentation>The compression algorithm used to compress binary data
        (appended mode only). None offers fastest write, LZ4 offers fastest
        compressed write, ZLib offers balanced performance, LZMA offers
        smallest compressed filesize.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetCompressionLevel"
                         default_values="6"
                         name="CompressionLevel"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="1"
                 value="1"
                 info="fastest write" />
          <Entry text="2"
                 value="2" />
          <Entry text="3"
                 value="3" />
          <Entry text="4"
                 value="4" />
          <Entry text="5"
                 value="5"
                 info="balanced performance" />
          <Entry text="6"
                 value="6" />
          <Entry text="7"
                 value="7" />
          <Entry text="8"
                 value="8" />
          <Entry text="9"
                 value="9"
                 info="smallest filesize" />
        </EnumerationDomain>
        <Documentation>A compression performance parameter from 1 (faster/larger
         compressed filesize) to 9 (slower/smaller compressed filesize).</Documentation>
        <Hints>
          <PropertyWidgetDecorator type="GenericDecorator"
                                   mode="enabled_state"
                                   property="CompressorType"
                                   value="0"
                                   inverse="1" />
        </Hints>
      </IntVectorProperty>
      <!-- End of XMLDataSetWriterCore -->
   </Proxy>
    <!-- ================================================================= -->
    <PWriterProxy base_proxygroup="internal_writers"
                  base_proxyname="XMLDataObjectWriterCore"
                  class="vtkXMLPMultiBlockDataWriter"
                  name="XMLPMultiBlockDataWriterCore">
      <Documentation>Internal proxy used by
      XMLMultiBlockDataWriter.</Documentation>
      <!-- End of XMLPMultiBlockDataWriterCore -->
    </PWriterProxy>
    <!-- ================================================================= -->
    <PWriterProxy base_proxygroup="internal_writers"
                  base_proxyname="XMLDataObjectWriterCore"
                  class="vtkXMLPUniformGridAMRWriter"
                  name="XMLPUniformGridAMRWriter">
      <Documentation>
        Internal proxy used by XMLUniformGridAMRWriter
      </Documentation>
      <!-- End of XMLPUniformGridAMRWriter-->
    </PWriterProxy>
    <!-- ================================================================= -->
    <PWriterProxy base_proxygroup="internal_writers"
                  base_proxyname="XMLDataObjectWriterCore"
                  class="vtkXMLPPolyDataWriter"
                  name="XMLPPolyDataWriterCore">
      <Documentation>Internal writer used to write XML poly data in
      parallel.</Documentation>
      <IntVectorProperty command="SetGhostLevel"
                         default_values="1"
                         name="GhostLevel"
                         number_of_elements="1">
        <IntRangeDomain min="0"
                        name="range" />
        <Documentation>The number of ghost levels to include in the output
        file(s).</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetUseSubdirectory"
                         name="UseSubdirectory"
                         label="Store Data in Subdirectory"
                         number_of_elements="1"
                         default_values="1">
        <BooleanDomain name="bool"/>
        <Documentation>This property controls whether the writer puts the files for each piece
          in the same directory as the pvt* file or in a subdirectory named the same as the
          pvt* file without its extension</Documentation>
      </IntVectorProperty>
    </PWriterProxy>
    <!-- ================================================================= -->
    <PWriterProxy base_proxygroup="internal_writers"
                  base_proxyname="XMLDataObjectWriterCore"
                  class="vtkXMLPUnstructuredGridWriter"
                  name="XMLPUnstructuredGridWriterCore">
      <Documentation>Internal writer used to write XML poly data in
      parallel.</Documentation>
      <IntVectorProperty command="SetGhostLevel"
                         default_values="1"
                         name="GhostLevel"
                         number_of_elements="1">
        <IntRangeDomain min="0"
                        name="range" />
        <Documentation>The number of ghost levels to include in the output
        file(s).</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetUseSubdirectory"
                         name="UseSubdirectory"
                         label="Store Data in Subdirectory"
                         number_of_elements="1"
                         default_values="1">
        <BooleanDomain name="bool"/>
        <Documentation>This property controls whether the writer puts the files for each piece
          in the same directory as the pvt* file or in a subdirectory named the same as the
          pvt* file without its extension</Documentation>
      </IntVectorProperty>
    </PWriterProxy>
    <!-- ================================================================= -->
    <PWriterProxy base_proxygroup="internal_writers"
                  base_proxyname="XMLDataObjectWriterCore"
                  class="vtkXMLPTableWriter"
                  name="XMLPTableCore">
      <Documentation>Internal writer used to write XML poly data in
      parallel.</Documentation>
      <IntVectorProperty command="SetUseSubdirectory"
                         name="UseSubdirectory"
                         label="Store Data in Subdirectory"
                         number_of_elements="1"
                         default_values="1">
        <BooleanDomain name="bool"/>
        <Documentation>This property controls whether the writer puts the files for each piece
          in the same directory as the pvt* file or in a subdirectory named the same as the
          pvt* file without its extension</Documentation>
      </IntVectorProperty>
    </PWriterProxy>
    <!-- ================================================================= -->
    <PWriterProxy base_proxygroup="internal_writers"
                  base_proxyname="XMLDataObjectWriterCore"
                  class="vtkXMLPStructuredGridWriter"
                  name="XMLPStructuredGridWriterCore">
      <Documentation>Internal writer used to write XML poly data in
      parallel.</Documentation>
      <IntVectorProperty command="SetUseSubdirectory"
                         name="UseSubdirectory"
                         label="Store Data in Subdirectory"
                         number_of_elements="1"
                         default_values="1">
        <BooleanDomain name="bool"/>
        <Documentation>This property controls whether the writer puts the files for each piece
          in the same directory as the pvt* file or in a subdirectory named the same as the
          pvt* file without its extension</Documentation>
      </IntVectorProperty>
    </PWriterProxy>
    <!-- ================================================================= -->
    <PWriterProxy base_proxygroup="internal_writers"
                  base_proxyname="XMLDataObjectWriterCore"
                  class="vtkXMLPRectilinearGridWriter"
                  name="XMLPRectilinearGridWriterCore">
      <Documentation>Writer to write rectilinear grid in a xml-based vtk data
      file. Can be used for parallel writing.</Documentation>
      <IntVectorProperty command="SetUseSubdirectory"
                         name="UseSubdirectory"
                         label="Store Data in Subdirectory"
                         number_of_elements="1"
                         default_values="1">
        <BooleanDomain name="bool"/>
        <Documentation>This property controls whether the writer puts the files for each piece
          in the same directory as the pvt* file or in a subdirectory named the same as the
          pvt* file without its extension</Documentation>
      </IntVectorProperty>
    </PWriterProxy>
    <!-- ================================================================= -->
    <PWriterProxy base_proxygroup="internal_writers"
                  base_proxyname="XMLDataObjectWriterCore"
                  class="vtkXMLPImageDataWriter"
                  name="XMLPImageDataWriterCore"
                  parallel_only="1">
      <Documentation>Writer to write image data in a xml-based vtk data file.
      Can be used for parallel writing.</Documentation>
      <IntVectorProperty command="SetUseSubdirectory"
                         name="UseSubdirectory"
                         label="Store Data in Subdirectory"
                         number_of_elements="1"
                         default_values="1">
        <BooleanDomain name="bool"/>
        <Documentation>This property controls whether the writer puts the files for each piece
          in the same directory as the pvt* file or in a subdirectory named the same as the
          pvt* file without its extension</Documentation>
      </IntVectorProperty>
    </PWriterProxy>
  </ProxyGroup>
</ServerManagerConfiguration>
