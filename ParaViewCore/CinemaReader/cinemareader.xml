<ServerManagerConfiguration>
  <ProxyGroup name="misc">
    <!-- ================================================================== -->
    <Proxy name="CinemaDatabase" class="vtkCinemaDatabase">
      <Documentation>
        Object corresponding to a cinema_python.database.file_store.FileStore
      </Documentation>
      <StringVectorProperty animateable="0"
                            command="Load"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the cinema database index file</Documentation>
      </StringVectorProperty>
    </Proxy>
  </ProxyGroup>

  <ProxyGroup name="sources">
    <!-- ================================================================== -->
    <SelfGeneratingSourceProxy name="CinemaDatabasePipelineObjectReader" class="vtkCinemaDatabaseReader">
      <Documentation>
        Reader for a Cinema database.
      </Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the cinema database index file</Documentation>
      </StringVectorProperty>

      <StringVectorProperty command="SetPipelineObject"
                            name="PipelineObject"
                            number_of_elements="1"
                            animateable="0"
                            panel_visibility="never">
        <Documentation>This property lists which pipeline object to read.</Documentation>
      </StringVectorProperty>

      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>

      <Hints>
        <Representation port="0" view="RenderView" type="PVCinemaLayerRepresentation" />
      </Hints>
    </SelfGeneratingSourceProxy>

    <SelfGeneratingSourceProxy name="CinemaDatabasePipelineObjectFilter" class="vtkCinemaDatabaseReader"
      base_proxygroup="sources"
      base_proxyname="CinemaDatabasePipelineObjectReader">

      <InputProperty name="Input" repeatable="1" panel_visibility="never">
      </InputProperty>
      <Hints>
        <Representation port="0" view="RenderView" type="PVCinemaLayerRepresentation" />
      </Hints>
    </SelfGeneratingSourceProxy>
  </ProxyGroup>


  <ProxyGroup name="representations">

    <!-- ================================================================== -->
    <PVRepresentationProxy class="vtkPVCompositeRepresentation"
                           name="PVCinemaLayerRepresentation"
                           processes="client|renderserver|dataserver">
      <Documentation>PVRepresentationProxy for layers from Cinema database.</Documentation>
      <IntVectorProperty command="SetVisibility"
                         default_values="1"
                         name="Visibility"
                         number_of_elements="1"
                         panel_visibility="never">
        <BooleanDomain name="bool" />
        <Documentation>Set the visibility for this
        representation.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetForceUseCache"
                         default_values="0"
                         is_internal="1"
                         name="ForceUseCache"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetForcedCacheKey"
                            default_values="none"
                            is_internal="1"
                            name="ForcedCacheKey"
                            number_of_elements="1">
        <DoubleRangeDomain name="range" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </DoubleVectorProperty>
      <RepresentationType subproxy="CinemaLayerRepresentation" text="Cinema" />
      <StringVectorProperty command="GetRepresentationTypes"
                            information_only="1"
                            name="RepresentationTypesInfo"
                            si_class="vtkSIDataArrayProperty">
        <Documentation>Property that lists the available representation types.
        This is used by the domain for "Representation" to setup the list of
        types available correctly.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty command="SetActiveRepresentation"
                            default_values="Cinema"
                            name="Representation"
                            number_of_elements="1"
                            panel_visibility="default"
                            panel_widget="display_representation_selector" >
        <Documentation>Choose the type for the representation.</Documentation>
        <RepresentationTypeDomain name="list">
          <RequiredProperties>
            <Property function="StringList"
                      name="RepresentationTypesInfo" />
            <Property function="Input"
                      name="Input" />
          </RequiredProperties>
        </RepresentationTypeDomain>
      </StringVectorProperty>
      <InputProperty command="SetInputConnection" name="Input">
        <DataTypeDomain name="input_type">
          <DataType value="vtkPolyData" />
        </DataTypeDomain>
        <Documentation>Set the input to the representation.</Documentation>
      </InputProperty>
      <SubProxy>
        <Proxy name="CinemaLayerRepresentation"
          proxygroup="representations" proxyname="CinemaLayerRepresentation" />
        <ExposedProperties>
          <Property name="ColorArrayName" panel_visibility="never" />
          <Property name="LookupTable" panel_visibility="never" />
          <Property name="RenderLayersAsImage" />
        </ExposedProperties>
      </SubProxy>
      <!--
      <SubProxy>
        <Proxy name="SelectionRepresentation"
               proxygroup="representations"
               proxyname="SelectionRepresentation" />
      </SubProxy>
      -->
    </PVRepresentationProxy>

    <!-- ================================================================== -->
    <RepresentationProxy class="vtkCinemaLayerRepresentation"
                         name="CinemaLayerRepresentation"
                         processes="client|renderserver|dataserver">
      <Documentation>Representation for a Cinema database.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain name="input_type">
          <DataType value="vtkPolyData" />
        </DataTypeDomain>
        <Documentation>Set the input molecule for the
        representation.</Documentation>
      </InputProperty>
      <IntVectorProperty command="SetVisibility"
                         default_values="1"
                         name="Visibility"
                         number_of_elements="1"
                         panel_visibility="never">
        <BooleanDomain name="bool" />
        <Documentation>Set the visibility for this
        representation.</Documentation>
      </IntVectorProperty>

      <StringVectorProperty command="SetInputArrayToProcess"
                            element_types="0 0 0 0 2"
                            name="ColorArrayName"
                            no_custom_default="1"
                            panel_visibility="never"
                            number_of_elements="5">
        <Documentation>
          Set the array to color with. One must specify the field association and
          the array name of the array. If the array is missing, scalar coloring will
          automatically be disabled.
        </Documentation>
        <RepresentedArrayListDomain name="array_list">
          <RequiredProperties>
            <Property function="Input" name="Input" />
          </RequiredProperties>
        </RepresentedArrayListDomain>
        <FieldDataDomain name="field_list" disable_update_domain_entries="1">
          <RequiredProperties>
            <Property function="Input" name="Input" />
          </RequiredProperties>
        </FieldDataDomain>
      </StringVectorProperty>
      <ProxyProperty command="SetLookupTable" name="LookupTable">
        <Documentation>Set the lookup-table to use to map data array to colors.
        Lookuptable is only used with MapScalars to ON.</Documentation>
        <ProxyGroupDomain name="groups">
          <Group name="lookup_tables" />
        </ProxyGroupDomain>
    </ProxyProperty>
    <IntVectorProperty name="RenderLayersAsImage"
        command="SetRenderLayersAsImage"
        number_of_elements="1"
        default_values="0">
        <BooleanDomain name="bool" />
        <Documentation>
          When set to true, the mapper will ignore camera information from the layers
          and simply render the pixels from the layer image onto
          the entire viewport (filling it entirely). This is useful for debugging or
          in cases where the camera projection matrices in the Cinema database are
          potentially incorrect. When using this mode, combining with other
          regular 3D geometry in the same scene is not recommended and will produce
          weird artifacts.
        </Documentation>
    </IntVectorProperty>
    </RepresentationProxy>
  </ProxyGroup>

</ServerManagerConfiguration>
