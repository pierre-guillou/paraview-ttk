name: store_ccache

on:
  push:
    # triggered on tag pushes with tags beginning with either "v" or "dev"
    branch-ignore:
      - '*'
    tags:
      - 'ccache'

jobs:


  # -------#
  # Ubuntu #
  # -------#
  ccache-ubuntu:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]
    steps:

    - uses: actions/checkout@v2
      name: Checkout TTK source code
      with:
        repository: "topology-tool-kit/ttk"
        ref: "dev"

    - name: Install Ubuntu dependencies
      run: |
        sudo apt update
        # TTK dependencies
        sudo apt install -y \
          ccache \
          g++-11 \
          libboost-system-dev \
          libeigen3-dev \
          libgraphviz-dev \
          libosmesa-dev \
          libsqlite3-dev \
          graphviz \
          ninja-build \
          zlib1g-dev \
          dpkg-dev
        sudo python3 -m pip install scikit-learn

    - name: Install optional dependencies
      uses: topology-tool-kit/ttk/.github/actions/install-deps-unix@dev

    - uses: dsaltares/fetch-gh-release-asset@0.0.5
      name: Fetch TTK-ParaView headless Debian package
      with:
        repo: "pierre-guillou/paraview-ttk"
        version: "tags/5.9.1-headless"
        file: "ttk-paraview-headless-${{ matrix.os }}.deb"

    - name: Install ParaView .deb
      run: |
        sudo apt install ./ttk-paraview-headless-${{ matrix.os }}.deb

    - name: Create & configure TTK build directory
      run: |
        mkdir build
        cd build
        CC=gcc-11 CXX=g++-11 cmake \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DCMAKE_INSTALL_PREFIX=/usr \
          -DTTK_BUILD_PARAVIEW_PLUGINS=TRUE \
          -DTTK_BUILD_VTK_WRAPPERS=TRUE \
          -DTTK_BUILD_STANDALONE_APPS=TRUE \
          -DTTK_ENABLE_KAMIKAZE=TRUE \
          -DTTK_ENABLE_CPU_OPTIMIZATION=FALSE \
          -DTTK_ENABLE_SHARED_BASE_LIBRARIES=TRUE \
          -GNinja \
          $GITHUB_WORKSPACE

    - name: Build TTK
      run: |
        cd build
        cmake --build . --parallel

    - name: Archive cache
      run: |
        cd /home/runner
        tar czvf ttk-ccache.tar.gz .ccache

    - name: Upload ccache archive
      uses: actions/upload-artifact@v2
      with:
        name: ttk-ccache-${{ matrix.os }}
        path: /home/runner/ttk-ccache.tar.gz


  # ------#
  # macOS #
  # ------#
  ccache-macos:
    runs-on: macos-latest
    env:
      CCACHE_DIR: /Users/runner/work/ttk/.ccache
    steps:
    - uses: actions/checkout@v2
      name: Checkout TTK source code
      with:
        repository: "topology-tool-kit/ttk"
        ref: "dev"

    - name: Remove hosted Python
      run: |
        sudo rm -rf /usr/local/Frameworks/Python.framework

    - name: Install macOS dependencies
      run: |
        # ParaView dependencies
        brew install --cask xquartz
        brew install wget libomp ninja python
        # TTK dependencies
        brew install boost eigen graphviz numpy embree ccache
        python3 -m pip install scikit-learn
        # prepend ccache to system path
        echo "$(brew --prefix)/opt/ccache/libexec" >> $GITHUB_PATH

    - name: Install optional dependencies
      uses: topology-tool-kit/ttk/.github/actions/install-deps-unix@dev

    - name: Fetch TTK-ParaView headless macOS binary archive
      run: |
        wget https://github.com/pierre-guillou/paraview-ttk/releases/download/5.9.1-headless/ttk-paraview-headless.tar.gz

    - name: Install ParaView
      run: |
        tar xzvf ttk-paraview-headless.tar.gz
        sudo cp -r ttk-paraview/* /usr/local

    - name: Create & configure TTK build directory
      run: |
        mkdir build
        cd build
        cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DPython3_ROOT_DIR=$(brew --prefix python) \
          -DTTK_BUILD_PARAVIEW_PLUGINS=TRUE \
          -DTTK_BUILD_VTK_WRAPPERS=TRUE \
          -DTTK_BUILD_STANDALONE_APPS=TRUE \
          -DTTK_ENABLE_KAMIKAZE=TRUE \
          -DTTK_ENABLE_CPU_OPTIMIZATION=FALSE \
          -DTTK_ENABLE_SHARED_BASE_LIBRARIES=TRUE \
          -GNinja \
          $GITHUB_WORKSPACE

    - name: Build TTK
      run: |
        cd build
        cmake --build . --parallel

    - name: Archive cache
      run: |
        cd /Users/runner/work/ttk
        tar czvf ttk-ccache.tar.gz .ccache

    - name: Upload ccache archive
      uses: actions/upload-artifact@v2
      with:
        name: ttk-ccache-macOS
        path: /Users/runner/work/ttk/ttk-ccache.tar.gz

  # --------------------- #
  # Upload release assets #
  # --------------------- #
  create-release:
    runs-on: ubuntu-latest
    needs: [ccache-ubuntu, ccache-macos]
    steps:

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Fetch all uploaded artifacts
      uses: actions/download-artifact@v2

    - name: Upload Ubuntu Bionic .deb as Release Asset
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.ref }}
        file: ttk-ccache-ubuntu-18.04/ttk-ccache.tar.gz
        asset_name: ttk-ccache-ubuntu-18.04.tar.gz

    - name: Upload Ubuntu Focal .deb as Release Asset
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.ref }}
        file: ttk-ccache-ubuntu-20.04/ttk-ccache.tar.gz
        asset_name: ttk-ccache-ubuntu-20.04.tar.gz

    - name: Upload .pkg as Release Asset
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.ref }}
        file: ttk-ccache-macOS/ttk-ccache.tar.gz
        asset_name: ttk-ccache-macOS.tar.gz
